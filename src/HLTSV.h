#ifndef HLTSV_H
#define HLTSV_H

#include <is/info.h>

#include <string>
#include <ostream>


// <<BeginUserCode>>

// <<EndUserCode>>

namespace hltsv
{
/**
 * 
 * @author  generated by the IS tool
 * @version 18/09/15
 */

class HLTSV : public ISInfo {
public:

    /**
     * Number of LVL1 events
     */
    uint64_t                      LVL1Events;

    /**
     * Number of assigned events
     */
    uint64_t                      AssignedEvents;

    /**
     * Number of reassigned events.
     */
    uint64_t                      ReassignedEvents;

    /**
     * Number of processed events
     */
    uint64_t                      ProcessedEvents;

    /**
     * The number of currently available cores on the DCMs.
     */
    unsigned int                  AvailableCores;

    /**
     * Instantaneous Rate (Hz)
     */
    float                         Rate;

    /**
     * Recent Level 1 ID
     */
    unsigned int                  Recent_LVL1_ID;

    /**
     * Recent Global Event ID
     */
    uint64_t                      Recent_Global_ID;

    /**
     * Busy Rate
     */
    float                         Busy;

    /**
     * Number of failed LVL1 decodings
     */
    uint64_t                      LVL1DecodingErrors;


    static const ISType & type() {
	static const ISType type_ = HLTSV( ).ISInfo::type();
	return type_;
    }

    virtual std::ostream & print( std::ostream & out ) const {
	ISInfo::print( out );
	out << std::endl;
	out << "LVL1Events: " << LVL1Events << "\t// Number of LVL1 events" << std::endl;
	out << "AssignedEvents: " << AssignedEvents << "\t// Number of assigned events" << std::endl;
	out << "ReassignedEvents: " << ReassignedEvents << "\t// Number of reassigned events." << std::endl;
	out << "ProcessedEvents: " << ProcessedEvents << "\t// Number of processed events" << std::endl;
	out << "AvailableCores: " << AvailableCores << "\t// The number of currently available cores on the DCMs." << std::endl;
	out << "Rate: " << Rate << "\t// Instantaneous Rate (Hz)" << std::endl;
	out << "Recent_LVL1_ID: " << Recent_LVL1_ID << "\t// Recent Level 1 ID" << std::endl;
	out << "Recent_Global_ID: " << Recent_Global_ID << "\t// Recent Global Event ID" << std::endl;
	out << "Busy: " << Busy << "\t// Busy Rate" << std::endl;
	out << "LVL1DecodingErrors: " << LVL1DecodingErrors << "\t// Number of failed LVL1 decodings";
	return out;
    }

    HLTSV( )
      : ISInfo( "HLTSV" )
    {
	initialize();
    }

    ~HLTSV(){

// <<BeginUserCode>>

// <<EndUserCode>>
    }

protected:
    HLTSV( const std::string & type )
      : ISInfo( type )
    {
	initialize();
    }

    void publishGuts( ISostream & out ){
	out << LVL1Events << AssignedEvents << ReassignedEvents << ProcessedEvents << AvailableCores;
	out << Rate << Recent_LVL1_ID << Recent_Global_ID << Busy << LVL1DecodingErrors;
    }

    void refreshGuts( ISistream & in ){
	in >> LVL1Events >> AssignedEvents >> ReassignedEvents >> ProcessedEvents >> AvailableCores;
	in >> Rate >> Recent_LVL1_ID >> Recent_Global_ID >> Busy >> LVL1DecodingErrors;
    }

private:
    void initialize()
    {
	LVL1Events = 0;
	AssignedEvents = 0;
	ReassignedEvents = 0;
	ProcessedEvents = 0;
	AvailableCores = 0;
	Rate = 0.0;
	Recent_LVL1_ID = 0;
	Recent_Global_ID = 0;
	Busy = 0.0;
	LVL1DecodingErrors = 0;

// <<BeginUserCode>>

// <<EndUserCode>>
    }


// <<BeginUserCode>>
public:
    void reset()
    {
        initialize();
    }

// <<EndUserCode>>
};

// <<BeginUserCode>>

// <<EndUserCode>>
inline std::ostream & operator<<( std::ostream & out, const HLTSV & info ) {
    info.print( out );
    return out;
}

}

#endif // HLTSV_H
