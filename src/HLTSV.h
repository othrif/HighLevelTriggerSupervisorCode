#ifndef HLTSV_H
#define HLTSV_H

#include <is/info.h>

#include <string>
#include <ostream>
#include <vector>


// <<BeginUserCode>>

// <<EndUserCode>>

namespace hltsv
{
/**
 * 
 * @author  generated by the IS tool
 * @version 03/05/16
 */

class HLTSV : public ISInfo {
public:

    /**
     * Number of LVL1 events
     */
    uint64_t                      LVL1Events;

    /**
     * Number of assigned events
     */
    uint64_t                      AssignedEvents;

    /**
     * Number of reassigned events.
     */
    uint64_t                      ReassignedEvents;

    /**
     * Number of processed events
     */
    uint64_t                      ProcessedEvents;

    /**
     * The number of currently available cores on the DCMs.
     */
    unsigned int                  AvailableCores;

    /**
     * The fraction of available cores on average between samples
     */
    float                         FracAvailable;

    /**
     * The maximum number of available cores in the DCMs
     */
    unsigned int                  MaxAvailable;

    /**
     * Instantaneous Rate (Hz)
     */
    float                         Rate;

    /**
     * Recent Level 1 ID
     */
    unsigned int                  Recent_LVL1_ID;

    /**
     * Recent Global Event ID
     */
    uint64_t                      Recent_Global_ID;

    /**
     * Busy Rate
     */
    float                         Busy;

    /**
     * Number of failed LVL1 decodings
     */
    uint64_t                      LVL1DecodingErrors;

    /**
     * Bandwidth per channel (MBytes/s)
     */
    std::vector<double>           RoIB_Bandwidth;

    /**
     * Number of events received but not built yet due to missing ROLs
     */
    uint64_t                      RoIB_Pending_RNP;

    /**
     * Number of events built but waiting for the supervisor
     */
    uint64_t                      RoIB_Pending_DAQ;

    /**
     * Time to complete building an event in microseconds
     */
    uint64_t                      RoIB_time_Build;

    /**
     * Time to complete processing an event in microseconds
     */
    uint64_t                      RoIB_time_Process;

    /**
     * Time elapsed for timeouts in microseconds
     */
    uint64_t                      RoIB_timeout;

    /**
     * RobinNP free pages
     */
    std::vector<uint64_t>         RNP_Free_pages;

    /**
     * RobinNP used pages
     */
    std::vector<uint64_t>         RNP_Used_pages;

    /**
     * RobinNP most recent ID
     */
    std::vector<unsigned int>     RNP_Most_Recent_ID;

    /**
     * RobinNP XOFF state
     */
    std::vector<unsigned int>     RNP_XOFF_state;

    /**
     * RobinNP XOFF percentage (%)
     */
    std::vector<double>           RNP_XOFF_per;

    /**
     * RobinNP XOFF count
     */
    std::vector<uint64_t>         RNP_XOFF_count;

    /**
     * RobinNP current status of ROL-down
     */
    std::vector<unsigned int>     RNP_Down_stat;

    /**
     * Current status of bufferFull
     */
    std::vector<unsigned int>     RNP_bufferFull;

    /**
     * # of ROL Link-Down events
     */
    std::vector<unsigned short>   RNP_numberOfLdowns;


    static const ISType & type() {
	static const ISType type_ = HLTSV( ).ISInfo::type();
	return type_;
    }

    virtual std::ostream & print( std::ostream & out ) const {
	ISInfo::print( out );
	out << std::endl;
	out << "LVL1Events: " << LVL1Events << "\t// Number of LVL1 events" << std::endl;
	out << "AssignedEvents: " << AssignedEvents << "\t// Number of assigned events" << std::endl;
	out << "ReassignedEvents: " << ReassignedEvents << "\t// Number of reassigned events." << std::endl;
	out << "ProcessedEvents: " << ProcessedEvents << "\t// Number of processed events" << std::endl;
	out << "AvailableCores: " << AvailableCores << "\t// The number of currently available cores on the DCMs." << std::endl;
	out << "FracAvailable: " << FracAvailable << "\t// The fraction of available cores on average between samples" << std::endl;
	out << "MaxAvailable: " << MaxAvailable << "\t// The maximum number of available cores in the DCMs" << std::endl;
	out << "Rate: " << Rate << "\t// Instantaneous Rate (Hz)" << std::endl;
	out << "Recent_LVL1_ID: " << Recent_LVL1_ID << "\t// Recent Level 1 ID" << std::endl;
	out << "Recent_Global_ID: " << Recent_Global_ID << "\t// Recent Global Event ID" << std::endl;
	out << "Busy: " << Busy << "\t// Busy Rate" << std::endl;
	out << "LVL1DecodingErrors: " << LVL1DecodingErrors << "\t// Number of failed LVL1 decodings" << std::endl;
	out << "RoIB_Bandwidth[" << RoIB_Bandwidth.size() << "]:\t// Bandwidth per channel (MBytes/s)" << std::endl;
	for ( size_t i = 0; i < RoIB_Bandwidth.size(); ++i )
	    out << i << " : " << RoIB_Bandwidth[i] << std::endl;
	out << "RoIB_Pending_RNP: " << RoIB_Pending_RNP << "\t// Number of events received but not built yet due to missing ROLs" << std::endl;
	out << "RoIB_Pending_DAQ: " << RoIB_Pending_DAQ << "\t// Number of events built but waiting for the supervisor" << std::endl;
	out << "RoIB_time_Build: " << RoIB_time_Build << "\t// Time to complete building an event in microseconds" << std::endl;
	out << "RoIB_time_Process: " << RoIB_time_Process << "\t// Time to complete processing an event in microseconds" << std::endl;
	out << "RoIB_timeout: " << RoIB_timeout << "\t// Time elapsed for timeouts in microseconds" << std::endl;
	out << "RNP_Free_pages[" << RNP_Free_pages.size() << "]:\t// RobinNP free pages" << std::endl;
	for ( size_t i = 0; i < RNP_Free_pages.size(); ++i )
	    out << i << " : " << RNP_Free_pages[i] << std::endl;
	out << "RNP_Used_pages[" << RNP_Used_pages.size() << "]:\t// RobinNP used pages" << std::endl;
	for ( size_t i = 0; i < RNP_Used_pages.size(); ++i )
	    out << i << " : " << RNP_Used_pages[i] << std::endl;
	out << "RNP_Most_Recent_ID[" << RNP_Most_Recent_ID.size() << "]:\t// RobinNP most recent ID" << std::endl;
	for ( size_t i = 0; i < RNP_Most_Recent_ID.size(); ++i )
	    out << i << " : " << RNP_Most_Recent_ID[i] << std::endl;
	out << "RNP_XOFF_state[" << RNP_XOFF_state.size() << "]:\t// RobinNP XOFF state" << std::endl;
	for ( size_t i = 0; i < RNP_XOFF_state.size(); ++i )
	    out << i << " : " << RNP_XOFF_state[i] << std::endl;
	out << "RNP_XOFF_per[" << RNP_XOFF_per.size() << "]:\t// RobinNP XOFF percentage (%)" << std::endl;
	for ( size_t i = 0; i < RNP_XOFF_per.size(); ++i )
	    out << i << " : " << RNP_XOFF_per[i] << std::endl;
	out << "RNP_XOFF_count[" << RNP_XOFF_count.size() << "]:\t// RobinNP XOFF count" << std::endl;
	for ( size_t i = 0; i < RNP_XOFF_count.size(); ++i )
	    out << i << " : " << RNP_XOFF_count[i] << std::endl;
	out << "RNP_Down_stat[" << RNP_Down_stat.size() << "]:\t// RobinNP current status of ROL-down" << std::endl;
	for ( size_t i = 0; i < RNP_Down_stat.size(); ++i )
	    out << i << " : " << RNP_Down_stat[i] << std::endl;
	out << "RNP_bufferFull[" << RNP_bufferFull.size() << "]:\t// Current status of bufferFull" << std::endl;
	for ( size_t i = 0; i < RNP_bufferFull.size(); ++i )
	    out << i << " : " << RNP_bufferFull[i] << std::endl;
	out << "RNP_numberOfLdowns[" << RNP_numberOfLdowns.size() << "]:\t// # of ROL Link-Down events" << std::endl;
	for ( size_t i = 0; i < RNP_numberOfLdowns.size(); ++i )
	    out << i << " : " << RNP_numberOfLdowns[i] << std::endl;
	return out;
    }

    HLTSV( )
      : ISInfo( "HLTSV" )
    {
	initialize();
    }

    ~HLTSV(){

// <<BeginUserCode>>

// <<EndUserCode>>
    }

protected:
    HLTSV( const std::string & type )
      : ISInfo( type )
    {
	initialize();
    }

    void publishGuts( ISostream & out ){
	out << LVL1Events << AssignedEvents << ReassignedEvents << ProcessedEvents << AvailableCores;
	out << FracAvailable << MaxAvailable << Rate << Recent_LVL1_ID << Recent_Global_ID;
	out << Busy << LVL1DecodingErrors << RoIB_Bandwidth << RoIB_Pending_RNP << RoIB_Pending_DAQ;
	out << RoIB_time_Build << RoIB_time_Process << RoIB_timeout << RNP_Free_pages << RNP_Used_pages;
	out << RNP_Most_Recent_ID << RNP_XOFF_state << RNP_XOFF_per << RNP_XOFF_count << RNP_Down_stat;
	out << RNP_bufferFull << RNP_numberOfLdowns;
    }

    void refreshGuts( ISistream & in ){
	in >> LVL1Events >> AssignedEvents >> ReassignedEvents >> ProcessedEvents >> AvailableCores;
	in >> FracAvailable >> MaxAvailable >> Rate >> Recent_LVL1_ID >> Recent_Global_ID;
	in >> Busy >> LVL1DecodingErrors >> RoIB_Bandwidth >> RoIB_Pending_RNP >> RoIB_Pending_DAQ;
	in >> RoIB_time_Build >> RoIB_time_Process >> RoIB_timeout >> RNP_Free_pages >> RNP_Used_pages;
	in >> RNP_Most_Recent_ID >> RNP_XOFF_state >> RNP_XOFF_per >> RNP_XOFF_count >> RNP_Down_stat;
	in >> RNP_bufferFull >> RNP_numberOfLdowns;
    }

private:
    void initialize()
    {
	LVL1Events = 0;
	AssignedEvents = 0;
	ReassignedEvents = 0;
	ProcessedEvents = 0;
	AvailableCores = 0;
	FracAvailable = 0.0;
	MaxAvailable = 0;
	Rate = 0.0;
	Recent_LVL1_ID = 0;
	Recent_Global_ID = 0;
	Busy = 0.0;
	LVL1DecodingErrors = 0;
	RoIB_Bandwidth.resize( 1 );
	RoIB_Bandwidth[0] = 0;
	RoIB_Pending_RNP = 0;
	RoIB_Pending_DAQ = 0;
	RoIB_time_Build = 0;
	RoIB_time_Process = 0;
	RoIB_timeout = 0;
	RNP_Free_pages.resize( 1 );
	RNP_Free_pages[0] = 0;
	RNP_Used_pages.resize( 1 );
	RNP_Used_pages[0] = 0;
	RNP_Most_Recent_ID.resize( 1 );
	RNP_Most_Recent_ID[0] = 0;
	RNP_XOFF_state.resize( 1 );
	RNP_XOFF_state[0] = 0;
	RNP_XOFF_per.resize( 1 );
	RNP_XOFF_per[0] = 0;
	RNP_XOFF_count.resize( 1 );
	RNP_XOFF_count[0] = 0;
	RNP_Down_stat.resize( 1 );
	RNP_Down_stat[0] = 0;

// <<BeginUserCode>>

// <<EndUserCode>>
    }


// <<BeginUserCode>>

  public:
    void reset()
    {
      initialize();
    }
    
// <<EndUserCode>>
  };

// <<BeginUserCode>>
  
// <<EndUserCode>>
inline std::ostream & operator<<( std::ostream & out, const HLTSV & info ) {
    info.print( out );
    return out;
}

}

#endif // HLTSV_H
