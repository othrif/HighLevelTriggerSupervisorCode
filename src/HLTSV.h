#ifndef HLTSV_H
#define HLTSV_H

#include <is/info.h>

#include <string>
#include <ostream>


// <<BeginUserCode>>

// <<EndUserCode>>

namespace hltsv
{
/**
 * 
 * @author  generated by the IS tool
 * @version 22/08/11
 */

class HLTSV : public ISInfo {
public:

    /**
     */
    uint64_t                      LVL1Events;

    /**
     */
    uint64_t                      AssignedEvents;

    /**
     */
    uint64_t                      ProcessedEvents;

    /**
     */
    uint64_t                      Timeouts;

    /**
     */
    unsigned int                  ProcessingNodesInitial;

    /**
     */
    unsigned int                  ProcessingNodesDisabled;

    /**
     */
    unsigned int                  ProcessingNodesEnabled;

    /**
     */
    unsigned int                  ProcessingNodesAdded;

    /**
     */
    float                         Rate;


    static const ISType & type() {
	static const ISType type_ = HLTSV( ).ISInfo::type();
	return type_;
    }

    virtual std::ostream & print( std::ostream & out ) const {
	ISInfo::print( out );
	out << std::endl;
	out << "LVL1Events: " << LVL1Events << "\t// " << std::endl;
	out << "AssignedEvents: " << AssignedEvents << "\t// " << std::endl;
	out << "ProcessedEvents: " << ProcessedEvents << "\t// " << std::endl;
	out << "Timeouts: " << Timeouts << "\t// " << std::endl;
	out << "ProcessingNodesInitial: " << ProcessingNodesInitial << "\t// " << std::endl;
	out << "ProcessingNodesDisabled: " << ProcessingNodesDisabled << "\t// " << std::endl;
	out << "ProcessingNodesEnabled: " << ProcessingNodesEnabled << "\t// " << std::endl;
	out << "ProcessingNodesAdded: " << ProcessingNodesAdded << "\t// " << std::endl;
	out << "Rate: " << Rate << "\t// ";
	return out;
    }

    HLTSV( )
      : ISInfo( "HLTSV" )
    {
	initialize();
    }

    ~HLTSV(){

// <<BeginUserCode>>

// <<EndUserCode>>
    }

protected:
    HLTSV( const std::string & type )
      : ISInfo( type )
    {
	initialize();
    }

    void publishGuts( ISostream & out ){
	out << LVL1Events << AssignedEvents << ProcessedEvents << Timeouts << ProcessingNodesInitial;
	out << ProcessingNodesDisabled << ProcessingNodesEnabled << ProcessingNodesAdded;
	out << Rate;
    }

    void refreshGuts( ISistream & in ){
	in >> LVL1Events >> AssignedEvents >> ProcessedEvents >> Timeouts >> ProcessingNodesInitial;
	in >> ProcessingNodesDisabled >> ProcessingNodesEnabled >> ProcessingNodesAdded >> Rate;
    }

private:
    void initialize()
    {

// <<BeginUserCode>>

// <<EndUserCode>>
    }


// <<BeginUserCode>>

// <<EndUserCode>>
};

// <<BeginUserCode>>

// <<EndUserCode>>
inline std::ostream & operator<<( std::ostream & out, const HLTSV & info ) {
    info.print( out );
    return out;
}

}

#endif // HLTSV_H
